package notion

import (
	"cachManagerApp/app/db/models"
	"cachManagerApp/app/pkg/ButtonsCreate"
	"cachManagerApp/database"
	"log/slog"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var RemindersStates = map[int64]*models.Reminder{}

func StartReminder(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	// —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Reminder –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	RemindersStates[chatID] = &models.Reminder{
		UserID: uint64(chatID),
	}
}

func HandleReminderInput(bot *tgbotapi.BotAPI, update tgbotapi.Update, log *slog.Logger) {
	chatID := update.Message.Chat.ID
	reminder, exists := RemindersStates[chatID]
	if !exists {
		return
	}

	switch {
	case reminder.Frequency == "":
		// –ø–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–ª–∞—Ç–µ–∂–∞
		if update.Message.Text == "‚¨Ö –í –º–µ–Ω—é" {
			menuMain := ButtonsCreate.TelegramButtonCreator{}
			back := menuMain.CreateMainMenuButtons()
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
			msg.ReplyMarkup = back
			if _, err := bot.Send(msg); err != nil {
				log.Error("Failed to send main menu: %v", log.With("Error", err))
			}
			// –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
			delete(RemindersStates, update.Message.Chat.ID)
			return
		}

		frequency := update.Message.Text
		if frequency != "7Ô∏è‚É£ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é" && frequency != "üåô –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü" {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '7Ô∏è‚É£ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é' –∏–ª–∏ 'üåô –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü'.")
			_, _ = bot.Send(msg)
			return
		}

		if frequency == "7Ô∏è‚É£ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é" {
			reminder.Frequency = "–Ω–µ–¥–µ–ª—è"
		}

		if frequency == "üåô –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü" {
			reminder.Frequency = "–º–µ—Å—è—Ü"
		}

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '–∫—Ä–µ–¥–∏—Ç –∑–∞ –∞–≤—Ç–æ'")
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
		_, _ = bot.Send(msg)

	case reminder.Category == "":
		// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
		reminder.Category = update.Message.Text

		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì), –Ω–∞–ø—Ä–∏–º–µ—Ä 01.02.2006")
		_, err := bot.Send(msg)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è %v", log.With("Error", err))
		}
		return

	case reminder.NextReminder.IsZero():
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞

		// TODO –≤–∫–ª—é—á–∏—Ç—å
		//nextReminder, err := rulesForNotion.ValidateRightTime(update.Message.Text)
		//if err != nil {
		//	msg := tgbotapi.NewMessage(chatID, err.Error())
		//	_, _ = bot.Send(msg)
		//	return
		//}

		// –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
		nextReminder, err := time.Parse("02.01.2006", update.Message.Text)

		reminder.NextReminder = nextReminder

		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã), –Ω–∞–ø—Ä–∏–º–µ—Ä 23300")
		_, err = bot.Send(msg)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—É–º–º—ã: %v", log.With("Error", err))
		}

	case reminder.Amount == 0:
		// –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
		amount, err := strconv.Atoi(update.Message.Text)
		if err != nil || amount <= 0 {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			_, _ = bot.Send(msg)
			return
		}

		reminder.Amount = amount
		reminder.CreatedAt = time.Now()

		if err := database.DB.Create(&reminder).Error; err != nil {
			log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: %v", log.With("Error", err))
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			_, _ = bot.Send(msg)
			return
		}

		menuMain := ButtonsCreate.TelegramButtonCreator{}
		back := menuMain.CreateMainMenuButtons()
		msg := tgbotapi.NewMessage(chatID, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ üòä")

		msg.ReplyMarkup = back
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send main menu: %v", log.With("Error", err))
		}

		// –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		delete(RemindersStates, chatID)
		return
	}
}
