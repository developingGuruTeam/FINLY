package notion

import (
	"cachManagerApp/app/db/models"
	"cachManagerApp/database"
	"errors"
	"fmt"
	"log/slog"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/robfig/cron/v3"
)

func StartReminderServiceWithCron(bot *tgbotapi.BotAPI, log *slog.Logger) {
	c := cron.New()

	// TODO –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 12:00
	// "0 9 * * *" –æ–∑–Ω–∞—á–∞–µ—Ç "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00"
	c.AddFunc("*/1 * * * *", func() {
		err := processReminders(bot, log)
		if err != nil {
			log.Error(
				"Error while processing reminders: %v\n",
				log.With("error", err),
			)
		}
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º cron-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
	c.Start()
}

func processReminders(bot *tgbotapi.BotAPI, log *slog.Logger) error {
	now := time.Now()

	var reminders []models.Reminder
	if err := database.DB.Where("next_reminder <= ?", now).Find(&reminders).Error; err != nil {
		return errors.New("–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	}

	for _, reminder := range reminders {
		sendReminder(bot, reminder, log)

		if reminder.Frequency == "–Ω–µ–¥–µ–ª—è" {
			reminder.NextReminder = reminder.NextReminder.AddDate(0, 0, 7)
		} else if reminder.Frequency == "–º–µ—Å—è—Ü" {
			reminder.NextReminder = reminder.NextReminder.AddDate(0, 1, 0)
		} else {
			// –µ—Å–ª–∏ –Ω–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –∏–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ ‚Äî –º–æ–∂–Ω–æ –ª–∏–±–æ —É–¥–∞–ª–∏—Ç—å, –ª–∏–±–æ –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å ?
			reminder.NextReminder = time.Date(2100, 1, 1, 0, 0, 0, 0, time.Local)
		}

		if err := database.DB.Save(&reminder).Error; err != nil {
			log.Error("Error updating reminder:", log.With("error", err))
		}
	}
	return nil
}

func sendReminder(bot *tgbotapi.BotAPI, reminder models.Reminder, log *slog.Logger) {
	chatID := int64(reminder.UserID)

	text := fmt.Sprintf(
		"‚òÄÔ∏è–ú—ã –∫ –í–∞–º —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –ø–ª–∞—Ç–µ–∂ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '%s'\n–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: %d\n\n –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä\n",
		reminder.Category,
		reminder.Amount,
	)

	msg := tgbotapi.NewMessage(chatID, text)
	_, err := bot.Send(msg)
	if err != nil {
		log.Error(
			"Failed to send reminder to user %d:",
			log.With("user_id", chatID),
			log.With("error", err),
		)
	}
}
