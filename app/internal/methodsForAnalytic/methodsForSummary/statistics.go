package methodsForSummary

import (
	"cachManagerApp/app/db/models"
	"fmt"
	"gorm.io/gorm"
)

func GenerateStatisticsReport(userID int64, db *gorm.DB) string {
	report := "üßÆ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"

	/*
		7. –°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –º–µ—Å—è—Ü -
		8. –°–∞–º—ã–π –∑–∞—Ç—Ä–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü -
	*/

	// —Å–æ–∑–¥–∞–Ω–∏–µ —é–∑–µ—Ä–∞
	var user models.Users
	db.First(&user, "telegram_id = ?", userID)

	// –∏–º—è
	name := user.Name

	// –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	registrationDate := user.CreatedAt.Format("02-01-2006")

	// –≤–∞–ª—é—Ç–∞
	currency := user.Currency

	// –û–±–æ—Ä–æ—Ç
	var allIncomes, allExpenses int64
	db.Model(&models.Transactions{}).
		Where("telegram_id = ? AND operation_type = ?", userID, true).
		Select("SUM(quantities)").
		Scan(&allIncomes)
	db.Model(&models.Transactions{}).
		Where("telegram_id = ? AND operation_type = ?", userID, false).
		Select("SUM(quantities)").
		Scan(&allExpenses)
	allBalance := allIncomes - allExpenses

	// –º–∞–∫—Å –¥–æ—Ö–æ–¥
	var maxIncome uint64
	db.Table("transactions").
		Select("MAX(quantities)").Where("telegram_id = ? AND operation_type = ?", userID, true).
		Scan(&maxIncome)

	// –º–∞–∫—Å —Ä–∞—Å—Ö–æ–¥
	var maxExpense uint64
	db.Table("transactions").
		Select("MAX(quantities)").Where("telegram_id = ? AND operation_type = ?", userID, false).
		Scan(&maxExpense)

	// —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤
	var categoryInc string
	var totalInc uint64
	db.Table("transactions").
		Select("category, SUM(quantities) as Total").
		Where("telegram_id = ? AND operation_type = ?", userID, true).
		Group("category").
		Order("Total DESC").
		Limit(1).
		Row().Scan(&categoryInc, &totalInc)

	// —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤
	var categoryExp string
	var totalExp uint64
	db.Table("transactions").
		Select("category, SUM(quantities) as Total").
		Where("telegram_id = ? AND operation_type = ?", userID, false).
		Group("category").
		Order("Total DESC").
		Limit(1).
		Row().Scan(&categoryExp, &totalExp)

	// –∫–æ–ª-–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤—Å–µ–≥–æ
	var incCount, expCount int64
	db.Model(&models.Transactions{}).
		Where("telegram_id = ? AND operation_type = ?", userID, true).
		Count(&incCount)
	db.Model(&models.Transactions{}).
		Where("telegram_id = ? AND operation_type = ?", userID, false).
		Count(&expCount)

	report += fmt.Sprintf("üë§ –ò–º—è: *%s*\n\n", name)
	report += fmt.Sprintf("üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: *%s*\n\n", registrationDate)
	report += fmt.Sprintf("üí± –¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: *%s*\n\n", currency)
	report += fmt.Sprintf("–ë–∞–ª–∞–Ω—Å –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è %d %s\n\n", allBalance, currency)
	report += fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ %d %s\n\n", maxIncome, currency)
	report += fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ %d %s\n\n", maxExpense, currency)
	report += fmt.Sprintf("–¢–æ–ø –¥–æ—Ö–æ–¥ *%s %d* %s\n\n", categoryInc, totalInc, currency)
	report += fmt.Sprintf("–¢–æ–ø —Ä–∞—Å—Ö–æ–¥ *%s %d* %s\n\n", categoryExp, totalExp, currency)
	report += fmt.Sprintln("–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: %v \n(–î–æ—Ö–æ–¥—ã: %v , –†–∞—Å—Ö–æ–¥—ã: %v)", expCount+incCount, incCount, expCount)

	return report
}
