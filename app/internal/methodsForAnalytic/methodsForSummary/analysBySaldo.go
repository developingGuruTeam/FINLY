package methodsForSummary

import (
	"cachManagerApp/app/db/models"
	"cachManagerApp/app/internal/methodsForAnalytic/methodsForExpenses"
	"cachManagerApp/app/internal/methodsForAnalytic/methodsForIncomeAnalys"
	"cachManagerApp/database"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"math/rand"
)

var (
	summary = models.Summary{}
)

// –∞–Ω–∞–ª–∏–∑ —Å–∞–ª—å–¥–æ –∑–∞ –Ω–µ–¥–µ–ª—é
func AnalyseBySaldoWeek(update tgbotapi.Update) (models.Summary, error) {
	analyticExpenses := methodsForExpenses.ExpensesHandler{DB: database.DB}
	analyticIncomes := methodsForIncomeAnalys.AnalyticHandler{DB: database.DB}
	var summary models.Summary

	if database.DB == nil {
		return models.Summary{}, fmt.Errorf("–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∞–ª—å–¥–æ –∑–∞ –Ω–µ–¥–µ–ª—é")
	}

	totalWeekExpenses, err := analyticExpenses.ExpenseWeekAnalytic(update)
	if err != nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: %v", err)
	}

	totalWeekIncomes, err := analyticIncomes.IncomeWeekAnalytic(update)
	if err != nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: %v", err)
	}
	fmt.Println(summary.TotalIncome)
	// –ø–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö –¥–æ—Ö–æ–¥–æ–≤
	for category, amount := range totalWeekIncomes {
		summary.TotalIncome += amount
		summary.IncomeCategories = append(summary.IncomeCategories, models.CategorySummary{Category: category, Amount: amount})

		if amount > summary.TopIncome.Amount {
			summary.TopIncome = models.CategorySummary{
				Category: category,
				Amount:   amount,
			}
		}
	}
	fmt.Print(summary.TotalIncome)
	for category, amount := range totalWeekExpenses {
		summary.TotalExpense += amount
		summary.ExpenseCategories = append(summary.ExpenseCategories, models.CategorySummary{Category: category, Amount: amount})

		if amount > summary.TopExpense.Amount {
			summary.TopExpense = models.CategorySummary{
				Category: category,
				Amount:   amount,
			}
		}
	}

	summary.Profit = int64(summary.TotalIncome) - int64(summary.TotalExpense)
	return summary, nil
}

func GenerateWeeklySaldoReport(sum models.Summary, currency string) string {
	report := "üìä *–°–∞–ª—å–¥–æ –∑–∞ –Ω–µ–¥–µ–ª—é*\n"

	// –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∏–ª–∏ —É–±—ã—Ç–æ–∫
	if sum.Profit >= 0 {
		report += fmt.Sprintf("\nüü¢ –ë–∞–ª–∞–Ω—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π *%d* %s\n", sum.Profit, currency)
	} else {
		report += fmt.Sprintf("\nüî¥ –ë–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π *%d* %s\n", -sum.Profit, currency)
	}

	// —Ç–æ–ø —Ä–∞—Å—Ö–æ–¥
	if len(sum.ExpenseCategories) > 0 {
		report += fmt.Sprintf("\nüí∏ –ù–∞–∏–±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n%s %d %s \n", sum.TopExpense.Category, sum.TopExpense.Amount, currency)
	} else {
		report += "   ‚ñ™ –†–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç.\n"
	}

	// —Ç–æ–ø –¥–æ—Ö–æ–¥
	if len(sum.IncomeCategories) > 0 {
		report += fmt.Sprintf("\nüíµ –ù–∞–∏–±–æ–ª—å—à–∏–µ –¥–æ—Ö–æ–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n%s %d %s\n", sum.TopIncome.Category, sum.TopIncome.Amount, currency)
	} else {
		report += "   ‚ñ™ –î–æ—Ö–æ–¥–æ–≤ –Ω–µ—Ç.\n"
	}

	if sum.Profit >= 0 {
		report += fmt.Sprintf("\n\nüí°`%s`\n ", randomAdvicePositive())
	} else {
		report += fmt.Sprintf("\n\nüí°`%s`\n", randomAdviceNegative())
	}
	return report
}

// –∞–Ω–∞–ª–∏–∑ —Å–∞–ª—å–¥–æ –∑–∞ –º–µ—Å—è—Ü
func AnalyseBySaldoMonth(update tgbotapi.Update) (models.Summary, error) {
	analyticExpenses := methodsForExpenses.ExpensesHandler{DB: database.DB}
	analyticIncomes := methodsForIncomeAnalys.AnalyticHandler{DB: database.DB}
	var summary models.Summary
	if database.DB == nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Å–∞–ª—å–¥–æ")
	}

	totalExpenses, err := analyticExpenses.ExpenseMonthAnalytic(update)
	if err != nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
	}
	totalIncomes, _, err := analyticIncomes.IncomeMonthAnalytic(update)
	if err != nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–æ–≤")
	}

	for category, amount := range totalExpenses {
		summary.TotalExpense += amount
		summary.ExpenseCategories = append(summary.ExpenseCategories, models.CategorySummary{Category: category, Amount: amount})
		if amount > summary.TopExpense.Amount {
			summary.TopExpense = models.CategorySummary{
				Category: category,
				Amount:   amount}
		}
	}

	for category, amount := range totalIncomes {
		summary.TotalIncome += amount
		summary.IncomeCategories = append(summary.IncomeCategories, models.CategorySummary{Category: category, Amount: amount})
		if amount > summary.TopIncome.Amount {
			summary.TopIncome = models.CategorySummary{Category: category, Amount: amount}
		}
	}

	summary.Profit = int64(summary.TotalIncome) - int64(summary.TotalExpense)
	return summary, nil
}

func GenerateMonthlySaldoReport(sum models.Summary, currency string) string {
	report := "üìä *–°–∞–ª—å–¥–æ –∑–∞ –º–µ—Å—è—Ü*\n"

	if sum.Profit >= 0 {
		report += fmt.Sprintf("\nüü¢ –ë–∞–ª–∞–Ω—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π *%d* %s\n ", sum.Profit, currency)
	} else {
		report += fmt.Sprintf("\nüî¥ –ë–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π *%d* %s\n", -sum.Profit, currency)
	}

	// —Ç–æ–ø —Ä–∞—Å—Ö–æ–¥
	if len(sum.ExpenseCategories) > 0 {
		report += fmt.Sprintf("\nüí∏ –ù–∞–∏–±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n%s %d %s\n", sum.TopExpense.Category, sum.TopExpense.Amount, currency)
	} else {
		report += "   ‚ñ™ –†–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç.\n"
	}

	// —Ç–æ–ø –¥–æ—Ö–æ–¥
	if len(sum.IncomeCategories) > 0 {
		report += fmt.Sprintf("\nüíµ –ù–∞–∏–±–æ–ª—å—à–∏–µ –¥–æ—Ö–æ–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n%s %d %s \n", sum.TopIncome.Category, sum.TopIncome.Amount, currency)
	} else {
		report += "   ‚ñ™ –î–æ—Ö–æ–¥–æ–≤ –Ω–µ—Ç.\n"
	}

	if sum.Profit >= 0 {
		report += fmt.Sprintf("\n\nüí°`%s`\n ", randomAdvicePositive())
	} else {
		report += fmt.Sprintf("\n\nüí°`%s`\n", randomAdviceNegative())
	}
	return report
}

func randomAdviceNegative() string {
	txt := [...]string{
		"–ò–Ω–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –∑–∞–¥—É–º—ã–≤–∞—Ç—å—Å—è –æ —Å–≤–æ–∏—Ö —Ç—Ä–∞—Ç–∞—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.",
		"–í–æ–∑–º–æ–∂–Ω–æ, —É –í–∞—Å –±—ã–ª–∏ –≤–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∞–∫–∏—Ö –∑–∞—Ç—Ä–∞—Ç. –û–¥–Ω–∞–∫–æ, –Ω—É–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ —ç–∫–æ–Ω–æ–º–Ω—ã–º.",
		"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–∞—Ç—ã –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å.",
		"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
		"–ò–Ω–æ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–∞—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤.",
		"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–∏—à–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤? –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.",
		"–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.",
		"–ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –∫–æ–ø–∏–ª–∫–µ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö, –Ω–æ –≤–∞–∂–Ω—ã—Ö —Ü–µ–ª–µ–π?",
		"–ò–∑–±–µ–≥–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ ‚Äî —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –≤—Ä–∞–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.",
		"–ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ—Ö–æ–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ —É—Ä–µ–∑–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç—Ä–∞—Ç—ã.",
		"–ó–∞–ø–æ–º–Ω–∏—Ç–µ: —Ä–∞–∑—É–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –±—é–¥–∂–µ—Ç–∞ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É.",
		"–û—Ü–µ–Ω–∏—Ç–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∫–∞–∂–¥–∞—è –ø–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π.",
		"–°–¥–µ–ª–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü: –≥–¥–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å?",
		"–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥ –¥–ª—è —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.",
		"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–¥–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –∞–∫—Ü–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.",
		"–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —É—Å–ª—É–≥.",
		"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å: —ç—Ç–æ –∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å?",
		"–ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –º–µ–ª–∫–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –±–æ–ª—å—à–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.",
		"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ç—Ä–∞—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —á–∞—Å—Ç–∏ –ø—Ä–∏–≤—ã—á–µ–∫.",
		"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ —Å–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª—è—Ö.",
	}
	return txt[rand.Intn(len(txt))]
}

func randomAdvicePositive() string {
	txt := [...]string{
		"–í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –≤–µ–¥–µ—Ç–µ —Å–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç!",
		"–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
		"–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ø–µ—Ö–∏ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –ø–æ—Ö–≤–∞–ª—ã!",
		"–í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ –æ—Ç–ª–∏—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞.",
		"–í–∞—à–∏ —É—Å–∏–ª–∏—è –æ–∫—É–ø–∞—é—Ç—Å—è ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
		"–í—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞–µ—Ç–µ—Å—å –∫ —Å–≤–æ–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ü–µ–ª—è–º.",
		"–í–∞—à–∏ —Ç—Ä–∞—Ç—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ‚Äî —ç—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç —É–≤–∞–∂–µ–Ω–∏—è.",
		"–≠–∫–æ–Ω–æ–º–∏—è –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞ ‚Äî —ç—Ç–æ –≤–∞—à –ø–æ–¥—Ö–æ–¥, –∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!",
		"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏ –¥–æ—Ö–æ–¥–∞–º–∏ ‚Äî —ç—Ç–æ —É—Å–ø–µ—Ö!",
		"–í–∞—à –±—é–¥–∂–µ—Ç ‚Äî –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è.",
		"–í—ã –¥–µ–ª–∞–µ—Ç–µ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.",
		"–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —ç–∫–æ–Ω–æ–º–∏–∏ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç.",
		"–ú–æ–ª–æ–¥–µ—Ü! –í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ —Å–≤–æ–∏–º–∏ —Ü–µ–ª—è–º–∏.",
		"–í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ –æ—Ç–ª–∏—á–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.",
		"–í–∞—à –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –±—é–¥–∂–µ—Ç–æ–º ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ —Å–≤–æ–±–æ–¥–µ.",
		"–ö–∞–∂–¥–∞—è –≤–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏—è –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.",
		"–í—ã —Å–¥–µ–ª–∞–ª–∏ –æ–≥—Ä–æ–º–Ω—ã–π —à–∞–≥ –∫ —Å–≤–æ–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –º–µ—á—Ç–∞–º.",
		"–í–∞–º —É–¥–∞–µ—Ç—Å—è –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–∞–∑—É–º–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç—Ä–∞—Ç–∞–º–∏ –∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º–∏.",
		"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—Å–ø–µ—Ö –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å.",
		"–í–∞—à–∏ —É—Å–∏–ª–∏—è –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –±—é–¥–∂–µ—Ç–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç!",
	}
	return txt[rand.Intn(len(txt))]
}
