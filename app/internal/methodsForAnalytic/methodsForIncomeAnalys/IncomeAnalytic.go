package methodsForIncomeAnalys

import (
	"cachManagerApp/app/db/models"
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gorm.io/gorm"
)

// —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ—Ö–æ–¥–æ–≤
type IncomeAnalyticHandlers interface {
	IncomeDayAnalytic(update tgbotapi.Update) ([]models.Transactions, error)
	IncomeWeekAnalytic(update tgbotapi.Update) (map[string]uint64, error)
	IncomeMonthAnalytic(update tgbotapi.Update) (map[string]uint64, error)
}

type AnalyticHandler struct {
	DB *gorm.DB
}

func (an *AnalyticHandler) IncomeDayAnalytic(update tgbotapi.Update) ([]models.Transactions, error) {
	now := time.Now()
	startOfDay := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
	endOfDay := startOfDay.Add(24 * time.Hour)

	// –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	var transactions []models.Transactions
	err := an.DB.Where("telegram_id = ? AND operation_type = ? AND created_at BETWEEN ? AND ?",
		update.Message.Chat.ID, true, startOfDay, endOfDay).Find(&transactions).Error
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %w", err)
	}
	return transactions, nil
}

func GenerateDailyIncomeReport(transactions []models.Transactions, currency string) string {
	if len(transactions) == 0 {
		return "üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Ö–æ–¥–æ–≤ –Ω–µ—Ç"
	}

	report := "üìà *–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å (–¥–æ—Ö–æ–¥—ã)*\n\n"
	totalIncome := uint64(0)

	for _, inc := range transactions {
		// +3 —á–∞—Å–∞ –∫ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –º—Å–∫ –¥–µ–ª–∞—é –≤—Ä–µ–º–µ–Ω–Ω–æ. –ù–ê–î–û –í –ë–î –ü–û–°–¢–ê–í–ò–¢–¨ –ù–ê–®–ï –í–†–ï–ú–Ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!!! –ª–∏–±–æ –∫–∞–∫-—Ç–æ –∫ —é—Å–µ—Ä—É –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è
		localTime := inc.CreatedAt
		formattedTime := localTime.Format("15:04")

		report += fmt.Sprintf("‚ñ™ *%s*\n", inc.Category)
		report += fmt.Sprintf("%d %s üìù _%v_", inc.Quantities, currency, formattedTime)

		// —Å–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–≤–æ–¥
		if inc.Description != "" {
			decs := inc.Description
			runes := []rune(decs)
			if len([]rune(decs)) > 32 {
				decs = string(runes[:32])
			}

			report += fmt.Sprintf(" _%s_", decs)
		}
		report += "\n"
		totalIncome += inc.Quantities
	}

	report += fmt.Sprintf("\nüí∏ –ò—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å:\n*%d* %s\n", totalIncome, currency)
	return report
}

func (an *AnalyticHandler) IncomeWeekAnalytic(update tgbotapi.Update) (map[string]uint64, error) {
	now := time.Now()
	startOfWeek := now.AddDate(0, 0, -7)
	endOfWeek := now

	var results []struct {
		Category   string
		TotalValue uint64
	}

	err := an.DB.Model(&models.Transactions{}).
		Select("category, SUM (quantities) as total_value").
		Where("telegram_id = ? AND operation_type = ? AND created_at BETWEEN ? AND ?",
			update.Message.Chat.ID, true, startOfWeek, endOfWeek).
		Group("category").
		Scan(&results).Error
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: %w", err)
	}

	categorySummary := make(map[string]uint64)
	for _, result := range results {
		categorySummary[result.Category] += result.TotalValue
	}
	return categorySummary, nil
}

func GenerateWeeklyIncomeReport(categorySummary map[string]uint64, currency string) string {
	categoryDetails := map[string]string{
		"–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞":    "üîµ",
		"–ü–æ–±–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥":      "üî¥",
		"–î–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞":    "üü°",
		"–ì–æ—Å. –≤—ã–ø–ª–∞—Ç—ã":        "üü¢",
		"–ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞":   "üü†",
		"–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π": "üü£",
		"–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã":       "‚ö™Ô∏è",
	}

	if len(categorySummary) == 0 {
		return "üìä –ó–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é –¥–æ—Ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
	}

	totalIncome := uint64(0)
	for _, value := range categorySummary {
		totalIncome += value
	}

	report := "üìä *–î–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é*\n\n"

	for category, value := range categorySummary {
		percentage := (float64(value) / float64(totalIncome)) * 100
		if emoji, exists := categoryDetails[category]; exists {
			report += fmt.Sprintf("%s %s: %d %s (%d%%)\n", emoji, category, value, currency, int(percentage))
		} else {
			report += fmt.Sprintf("%s: %d %s (%d%%)\n", category, value, currency, int(percentage))
		}
	}

	report += fmt.Sprintf("\nüí∏ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: *%d* %s", totalIncome, currency)
	return report
}

func (a *AnalyticHandler) IncomeMonthAnalytic(update tgbotapi.Update) (map[string]uint64, uint64, error) {
	now := time.Now()
	startOfMonth := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, now.Location())
	endOfMonth := startOfMonth.AddDate(0, 1, 0).Add(-time.Second)

	var results []struct {
		Category string
		Value    uint64
	}

	err := a.DB.Model(&models.Transactions{}).
		Select("category, SUM(quantities) as value").
		Where("telegram_id = ? AND operation_type = ? AND created_at BETWEEN ? AND ?",
			update.Message.Chat.ID, true, startOfMonth, endOfMonth). // –¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã
		Group("category").
		Scan(&results).Error

	if err != nil {
		return nil, 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü: %v", err)
	}

	categorySummary := make(map[string]uint64)
	totalIncome := uint64(0)

	for _, item := range results {
		categorySummary[item.Category] = item.Value
		totalIncome += item.Value
	}

	return categorySummary, totalIncome, nil
}

func GenerateMonthlyIncomeReport(categorySummary map[string]uint64, currency string) string {
	categoryDetails := map[string]string{
		"–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞":    "üîµ",
		"–ü–æ–±–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥":      "üî¥",
		"–î–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞":    "üü°",
		"–ì–æ—Å. –≤—ã–ø–ª–∞—Ç—ã":        "üü¢",
		"–ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞":   "üü†",
		"–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π": "üü£",
		"–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã":       "‚ö™Ô∏è",
	}

	if len(categorySummary) == 0 {
		return "üìä –ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü –¥–æ—Ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
	}

	totalIncome := uint64(0)
	for _, value := range categorySummary {
		totalIncome += value
	}

	report := "üìä *–î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü*\n\n"

	for category, value := range categorySummary {
		percentage := (float64(value) / float64(totalIncome)) * 100
		if emoji, exists := categoryDetails[category]; exists {
			report += fmt.Sprintf("%s %s: %d (%d%%)\n", emoji, category, value, int(percentage))
		} else {
			report += fmt.Sprintf("%s: %d (%d%%)\n", category, value, int(percentage))
		}
	}

	report += fmt.Sprintf("\nüí∏ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: *%d* %s", totalIncome, currency)

	return report
}
