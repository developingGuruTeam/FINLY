package TgBot

import (
	"cachManagerApp/app/internal/methodsForTransaction"
	"cachManagerApp/app/internal/methodsForUser"
	"cachManagerApp/app/pkg/ButtonsCreate"
	"fmt"
	"log/slog"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func handleTransactionAction(bot *tgbotapi.BotAPI, update tgbotapi.Update, transResp TransactionResponse, buttonCreator ButtonsCreate.TelegramButtonCreator, log *slog.Logger) {
	chatID := update.Message.Chat.ID
	switch transResp.Action {
	// incomes
	case "salary":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Info("Failed to save salary: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "additional_income":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ü–æ–±–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥"
		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Error("Failed to save additional income: %v", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–±–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send additional income message: %v", log.With("error", err))
		}

	case "business_income":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–î–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞"
		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Error("Failed to save business income: %v", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send business income message: %v", log.With("error", err))
		}

	case "investment_income":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"
		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Error("Failed to save investment income: %v", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send investment income message: %v", log.With("error", err))
		}

	case "state_payments":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ì–æ—Å. –≤—ã–ø–ª–∞—Ç—ã"
		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Error("Failed to save investment income: %v", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ –æ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send state income message: %v", log.With("error", err))
		}

	case "property_sales":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞"
		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Error("Failed to save investment income: %v", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –∏–º—É—â–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send investment income message: %v", log.With("error", err))
		}

	case "other_income":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã"
		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Error("Failed to save other income: %v", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send other income message: %v", log.With("error", err))
		}
	// expenses
	case "basic_expense":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ë—ã—Ç–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã"
		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Error("Failed to save basic expense: %v", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–°—É–º–º–∞ –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send basic expense message: ", log.With("error", err))
		}

	case "regular_expense":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"
		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Error("Failed to save regular expense:", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send regular expense message:", log.With("error", err))
		}

	case "clothes":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–û–¥–µ–∂–¥–∞"
		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Error("Failed to save clothes", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–†–∞—Å—Ö–æ–¥ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞—Ä–¥–µ—Ä–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send clothes message", log.With("error", err))
		}

	case "health":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ó–¥–æ—Ä–æ–≤—å–µ"
		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Error("Failed to save health", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–†–∞—Å—Ö–æ–¥ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send health message", log.With("error", err))
		}

	case "leisure_education":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–î–æ—Å—É–≥ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Error("Failed to save leisure_education expense", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send leisure_education message", log.With("error", err))
		}

	case "investment_expense":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Error("Failed to save investment expense", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send investment expense message", log.With("error", err))
		}

	case "other_expense":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Error("Failed to save other expense", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("Failed to send other expense message", log.With("error", err))
		}
	}
	mu.Lock()
	delete(transactionStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	mu.Unlock()

}

func handleUserAction(bot *tgbotapi.BotAPI, update tgbotapi.Update, userResp UserResponse, log *slog.Logger) {
	chatID := update.Message.Chat.ID

	switch userResp.Action {
	case "expense":
		amount := update.Message.Text
		msg := tgbotapi.NewMessage(chatID, "–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ "+amount+" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—Ö–æ–¥–µ", log.With("error", err))
		}

	case "income":
		amount := update.Message.Text
		msg := tgbotapi.NewMessage(chatID, "–°—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–∞ "+amount+" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ", log.With("error", err))
		}

	case "change_name":
		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
		user := methodsForUser.UserMethod{}
		if err := user.UpdateUserName(update); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s! –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.", update.Message.Text))
		if _, err := bot.Send(msg); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏", log.With("error", err))
		}

	case "change_currency":
		user := methodsForUser.UserMethod{}
		if err := user.UpdateUserCurrency(update); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã", log.With("error", err))
		}
		msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.")
		if _, err := bot.Send(msg); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã", log.With("error", err))
		}
	}

	mu.Lock()
	delete(userStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	mu.Unlock()
}

// –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func returnToMainMenu(bot *tgbotapi.BotAPI, chatID int64, buttonCreator ButtonsCreate.TelegramButtonCreator, msg string) {
	// —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	mainMenu := buttonCreator.CreateMainMenuButtons()

	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	menuMsg := tgbotapi.NewMessage(chatID, msg)
	menuMsg.ReplyMarkup = mainMenu // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
	bot.Send(menuMsg)

	delete(transactionStates, chatID)
}
