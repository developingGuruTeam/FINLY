package TgBot

import (
	"cachManagerApp/app/internal/methodsForTransaction"
	"cachManagerApp/app/internal/methodsForUser"
	"cachManagerApp/app/pkg/ButtonsCreate"
	"fmt"
	"log/slog"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func handleTransactionAction(bot *tgbotapi.BotAPI, update tgbotapi.Update, transResp TransactionResponse, buttonCreator ButtonsCreate.TelegramButtonCreator, log *slog.Logger) {
	chatID := update.Message.Chat.ID
	switch transResp.Action {
	// –î–æ—Ö–æ–¥—ã
	case "salary":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Info("Failed to save salary: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "additional_income":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ü–æ–±–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Info("Failed to save additional income: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –ü–æ–±–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "business_income":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–î–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Info("Failed to save business income: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –î–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "investment_income":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Info("Failed to save investment income: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "state_payments":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ì–æ—Å. –≤—ã–ø–ª–∞—Ç—ã"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Info("Failed to save state payments: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –ì–æ—Å. –≤—ã–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "property_sales":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Info("Failed to save property sales: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "other_income":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostIncome(update, category, log); err != nil {
			log.Info("Failed to save other income: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	// –†–∞—Å—Ö–æ–¥—ã
	case "basic_expense":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ë—ã—Ç–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Info("Failed to save basic expense: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –ë—ã—Ç–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "regular_expense":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Info("Failed to save regular expense: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "clothes":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–û–¥–µ–∂–¥–∞"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Info("Failed to save clothes: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –¢—Ä–∞—Ç—ã –Ω–∞ –æ–¥–µ–∂–¥—É —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "health":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ó–¥–æ—Ä–æ–≤—å–µ"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Info("Failed to save health: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –¢—Ä–∞—Ç—ã –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "leisure_education":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–î–æ—Å—É–≥ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Info("Failed to save leisure and education expense: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –¢—Ä–∞—Ç—ã –Ω–∞ –¥–æ—Å—É–≥ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "investment_expense":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Info("Failed to save investment expense: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)

	case "other_expense":
		transaction := methodsForTransaction.TransactionsMethod{}
		category := "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
		sum, err := strconv.Atoi(update.Message.Text)
		if err != nil || sum <= 0 {
			msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
			bot.Send(msg)
			return
		}

		if err := transaction.PostExpense(update, category, log); err != nil {
			log.Info("Failed to save other expenses: %s", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
			bot.Send(msg)
			return
		}

		doneMsg := "‚úÖ –ü—Ä–æ—á–∏–µ —Ç—Ä–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
		returnToMainMenu(bot, chatID, buttonCreator, doneMsg)
	}
	mu.Lock()
	delete(transactionStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	mu.Unlock()

}

func handleUserAction(bot *tgbotapi.BotAPI, update tgbotapi.Update, userResp UserResponse, buttonCreator ButtonsCreate.TelegramButtonCreator, log *slog.Logger) {
	chatID := update.Message.Chat.ID

	switch userResp.Action {

	case "change_name":
		newName := strings.TrimSpace(update.Message.Text) // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å

		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–ª–∏–Ω–∞ –æ—Ç 1 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
		var validName bool = true
		for _, symbol := range newName {
			if !unicode.IsLetter(symbol) && symbol != ' ' { // –∏–º—è —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
				validName = false
				break
			}
		}

		if utf8.RuneCountInString(newName) == 0 || utf8.RuneCountInString(newName) > 32 || !validName {
			msg := tgbotapi.NewMessage(chatID, "üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤.")
			bot.Send(msg)
			return
		}

		// –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user := methodsForUser.UserMethod{}
		if err := user.UpdateUserName(update); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")
			bot.Send(msg)
			return
		}

		msgDone := fmt.Sprintf("‚úÖ –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ %s.", newName)
		returnToMainMenu(bot, chatID, buttonCreator, msgDone)

	case "change_currency":
		newCurrency := strings.ToLower(update.Message.Text) // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ –∞–ª—Ñ–∞–≤–∏—Ç
		var okCurrency bool = true
		for _, symbol := range newCurrency {
			if !unicode.IsLetter(symbol) {
				okCurrency = false
				break
			}
		}
		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã –Ω–∞ –¥–ª–∏–Ω—É
		if utf8.RuneCountInString(newCurrency) != 3 || okCurrency != true {
			msg := tgbotapi.NewMessage(chatID, "üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã. –í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.")
			bot.Send(msg)
			return
		}
		// –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user := methodsForUser.UserMethod{}
		if err := user.UpdateUserCurrency(update); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã")
			bot.Send(msg)
			return
		}

		msgDone := fmt.Sprintf("‚úÖ –í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ %s.", newCurrency)
		returnToMainMenu(bot, chatID, buttonCreator, msgDone)
	}

	mu.Lock()
	delete(userStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	mu.Unlock()
}

// –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func returnToMainMenu(bot *tgbotapi.BotAPI, chatID int64, buttonCreator ButtonsCreate.TelegramButtonCreator, msg string) {
	// —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	mainMenu := buttonCreator.CreateMainMenuButtons()

	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	menuMsg := tgbotapi.NewMessage(chatID, msg)
	menuMsg.ReplyMarkup = mainMenu // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
	bot.Send(menuMsg)

	delete(transactionStates, chatID)
}
