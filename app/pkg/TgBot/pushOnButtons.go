package TgBot

import (
	"cachManagerApp/app/internal/methodsForAnalytic/methodsForExpenses"
	"cachManagerApp/app/internal/methodsForAnalytic/methodsForIncomeAnalys"
	"cachManagerApp/app/internal/methodsForAnalytic/methodsForSummary"
	"cachManagerApp/app/internal/methodsForTransaction"
	"cachManagerApp/app/pkg/ButtonsCreate"
	"cachManagerApp/database"
	"fmt"
	"log/slog"
	"strconv"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type CommentResponse struct {
	Category string `json:"category"`
	Amount   int64  `json:"amount"`
}

type TransactionResponse struct {
	Action string `json:"action"`
}

type UserResponse struct {
	Action string `json:"action"`
}

var (
	mu                sync.Mutex                            // –º—å—é—Ç–µ–∫—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–ø–µ
	commentStates     = make(map[int64]CommentResponse)     // –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
	userStates        = make(map[int64]UserResponse)        // –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	transactionStates = make(map[int64]TransactionResponse) // –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
)

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—é–¥–∞)
func PushOnButton(bot *tgbotapi.BotAPI, update tgbotapi.Update, buttonCreator ButtonsCreate.TelegramButtonCreator, log *slog.Logger) {
	if update.Message != nil {
		chatID := update.Message.Chat.ID

		// –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–∏–º –º–∞–ø–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		mu.Lock()
		val, ok := userStates[chatID]          // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏/–≤–∞–ª—é—Ç—ã
		val2, ok2 := transactionStates[chatID] // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		val3, ok3 := commentStates[chatID]     // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
		mu.Unlock()

		// –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
		if ok3 {
			if update.Message.Text == "‚§µÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
				// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞
				transaction := methodsForTransaction.TransactionsMethod{}
				if err := transaction.PostTransactionWithComment(update, val3.Category, val3.Amount, "", log); err != nil {
					log.Info("Failed to save transaction without comment: %s", log.With("error", err))
					msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
					bot.Send(msg)
					return
				}

				doneMsg := "‚úÖ –°—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
				returnToMainMenu(bot, chatID, buttonCreator, doneMsg) // —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
				mu.Lock()
				delete(commentStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
				mu.Unlock()
				return
			}

			// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∫–æ–º–º–µ–Ω—Ç–∞
			comment := update.Message.Text
			transaction := methodsForTransaction.TransactionsMethod{}
			if err := transaction.PostTransactionWithComment(update, val3.Category, val3.Amount, comment, log); err != nil {
				log.Info("Failed to save transaction with comment: %s", log.With("error", err))
				msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
				bot.Send(msg)
				return
			}

			doneMsg := "‚úÖ –°—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω"
			returnToMainMenu(bot, chatID, buttonCreator, doneMsg)
			mu.Lock()
			delete(commentStates, chatID)
			mu.Unlock()
			return
		}

		// –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω
		if ok2 && val2.Action != "" {
			// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
			sum, err := strconv.Atoi(update.Message.Text)
			if err != nil || sum <= 0 {
				msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
				bot.Send(msg)
				return
			}

			// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
			mu.Lock()
			commentStates[chatID] = CommentResponse{
				Category: val2.Action,
				Amount:   int64(sum),
			}
			delete(transactionStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç
			mu.Unlock()

			msg := tgbotapi.NewMessage(chatID, "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—É–º–º–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚§µÔ∏è*–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å*")
			msg.ParseMode = "Markdown"
			msg.ReplyMarkup = buttonCreator.CreateCommentButtons() // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
			bot.Send(msg)
			return
		}

		// –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –∏–ª–∏ –≤–∞–ª—é—Ç—ã
		if ok && val.Action != "" {
			handleUserAction(bot, update, val, buttonCreator, log) // –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
			return
		}

		// –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
		handleButtonPress(bot, update, buttonCreator, log)
	}
}
func handleButtonPress(bot *tgbotapi.BotAPI, update tgbotapi.Update, buttonCreator ButtonsCreate.TelegramButtonCreator, log *slog.Logger) {
	chatID := update.Message.Chat.ID
	currency, _ := CurrencyFromChatID(chatID)

	handled := false // —Ñ–ª–∞–∂–æ–∫
	switch update.Message.Text {

	// –û–ü–ò–°–ê–ù–ò–ï –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
	case "üì• –ü—Ä–∏—Ö–æ–¥":
		incomeMenu := buttonCreator.CreateIncomeMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
		msg.ReplyMarkup = incomeMenu
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send message for income: %v", log.With("error", err))
		}
		handled = true

	case "üì§ –†–∞—Å—Ö–æ–¥":
		expensesMenu := buttonCreator.CreateExpensesMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
		msg.ReplyMarkup = expensesMenu
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send message for expense: ", log.With("error", err))
		}
		handled = true

	case "üïπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
		manageMenu := buttonCreator.CreateManageMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
		msg.ReplyMarkup = manageMenu
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send message for expense: ", log.With("error", err))
		}
		handled = true

	case "üìä –û—Ç—á–µ—Ç—ã":
		reportMenu := buttonCreator.CreateReportsMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞")
		msg.ReplyMarkup = reportMenu
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send message for reports: ", log.With("error", err))
		}
		handled = true

	case "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
		AboutBot(bot, update.Message.Chat.ID, log)
		handled = true

	case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		settingsMenu := buttonCreator.CreateSettingsMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
		msg.ReplyMarkup = settingsMenu
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send message for settings: ", log.With("error", err))
		}
		handled = true

	case "‚¨Ö –í –º–µ–Ω—é":
		mainMenu := buttonCreator.CreateMainMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
		msg.ReplyMarkup = mainMenu
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send main menu: ", log.With("error", err))
		}
		handled = true

	// –û–ü–ò–°–ê–ù–ò–ï –ò–ù–õ–ê–ô–ù –ö–û–ú–ú–ê–ù–î

	case "/hi":
		// –æ—Å—Ç–∞–≤–∏–ª –æ–¥–Ω—É –∏–Ω–ª–∞–π–Ω –∫–æ–º–∞–Ω–¥—É 1 - –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, 2 - –ø—Ä–æ—Å—Ç–æ –≤ –ø—Ä–∏–∫–æ–ª –ø–æ–æ–±—â–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, ButtonsCreate.RandomTextForHi())
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		handled = true

	// –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ù–ê–°–¢–†–û–ô–ö–ò

	case "üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
		clearName, _ := ClearUserNameFromChatID(chatID)
		nameText := fmt.Sprintf("–¢–µ–∫—É—â–µ–µ –∏–º—è : *%s*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è\n_(–¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤)_", clearName)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, nameText)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		userStates[chatID] = UserResponse{Action: "change_name"}
		mu.Unlock()
		handled = true

	case "üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É":
		currencyText := fmt.Sprintf("–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: *%s*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É\n_(3 —Å–∏–º–≤–æ–ª–∞)_\n", currency)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, currencyText)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		userStates[chatID] = UserResponse{Action: "change_currency"}
		mu.Unlock()
		handled = true

	case "üí´ –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üë∑‚Äçüîß`–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ...`\n")
		msg.ParseMode = "Markdown"
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /info message: ", log.With("error", err))
		}
		handled = true

		// –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –ü–†–ò–•–û–î

	case "üí≥ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "salary"}
		mu.Unlock()
		handled = true

	case "üåü –ü–æ–±–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞\n_(–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞, —Ñ—Ä–∏–ª–∞–Ω—Å)_\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "additional_income"}
		mu.Unlock()
		handled = true

	case "üíº –î–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –æ—Ç –±–∏–∑–Ω–µ—Å–∞\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "business_income"}
		mu.Unlock()
		handled = true

	case "üè¶ –î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n_(–ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥–∞–º, –¥–∏–≤–∏–¥–µ–Ω–¥—ã)_\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "investment_income"}
		mu.Unlock()
		handled = true

	case "üëÆ‚Äç –ì–æ—Å. –≤—ã–ø–ª–∞—Ç—ã":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç\n_(–ø–µ–Ω—Å–∏–∏, –ø–æ—Å–æ–±–∏—è)_\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "state_payments"}
		mu.Unlock()
		handled = true

	case "üè† –ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º—É—â–µ—Å—Ç–≤–∞\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "property_sales"}
		mu.Unlock()
		handled = true

	case "‚ö™Ô∏è –ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—á–∏—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "other_income"}
		mu.Unlock()
		handled = true

		// –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –†–ê–°–•–û–î

	case "üõç –ë—ã—Ç–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—ã—Ç–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n_(–µ–¥–∞, –Ω–∞–ø–∏—Ç–∫–∏, –ø—Ä–æ–µ–∑–¥)_\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "basic_expense"}
		mu.Unlock()
		handled = true

	case "‚ôªÔ∏è –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞\n_(–∫—Ä–µ–¥–∏—Ç—ã, –Ω–∞–ª–æ–≥–∏, –∞—Ä–µ–Ω–¥–∞,\n–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)_\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message: ", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "regular_expense"}
		mu.Unlock()
		handled = true

	case "üëò –û–¥–µ–∂–¥–∞":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞—Ä–¥–µ—Ä–æ–±–∞\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "clothes"}
		mu.Unlock()
		handled = true

	case "üí™ –ó–¥–æ—Ä–æ–≤—å–µ":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è\n_(–∞–ø—Ç–µ–∫–∏, –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –≤–∏–∑–∏—Ç—ã –∫ –≤—Ä–∞—á–∞–º)_\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "health"}
		mu.Unlock()
		handled = true

	case "üë®‚Äçüè´ –î–æ—Å—É–≥ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞\n_(–∫–Ω–∏–≥–∏, –ø–æ–¥–ø–∏—Å–∫–∏, –∫—É—Ä—Å—ã, —Ö–æ–±–±–∏,\n –º—É–∑–µ–∏, –∫–∏–Ω–æ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã)_\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "leisure_education"}
		mu.Unlock()
		handled = true

	case "üè¶ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—É—é –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n_(–≤–∫–ª–∞–¥—ã, –∞–∫—Ü–∏–∏, –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π,\n–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ä–æc–∫–æ—à–∏)_\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "investment_expense"}
		mu.Unlock()
		handled = true

	case "‚ö™Ô∏è –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç —é–∑–µ—Ä–∞
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /help message", log.With("error", err))
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "other_expense"}
		mu.Unlock()
		handled = true

	// –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –û–¢–ß–ï–¢–´ (–¥–æ—Ö–æ–¥—ã)

	case "üíµ –û—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º":
		incomes := buttonCreator.CreateIncomeAnalyticButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞")
		msg.ReplyMarkup = incomes
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send main menu", log.With("error", err))
		}
		handled = true

	case "üìà –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
		analyticHandler := methodsForIncomeAnalys.AnalyticHandler{DB: database.DB} // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
		transactions, err := analyticHandler.IncomeDayAnalytic(update)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			_, _ = bot.Send(msg)
			log.Info("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å", log.With("error", err))
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
		report := methodsForIncomeAnalys.GenerateDailyIncomeReport(transactions, currency)
		msg := tgbotapi.NewMessage(chatID, report)
		msg.ParseMode = "Markdown"
		_, _ = bot.Send(msg)
		handled = true

	case "üìà –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é":
		dbConn := methodsForIncomeAnalys.AnalyticHandler{DB: database.DB}

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
		incomeSummary, err := dbConn.IncomeWeekAnalytic(update)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			_, _ = bot.Send(msg)
			log.Info("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–æ—Ö–æ–¥–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é", log.With("error", err))
			return
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
		report := methodsForIncomeAnalys.GenerateWeeklyIncomeReport(incomeSummary, currency)

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
		chartURL, err := methodsForIncomeAnalys.GenerateWeeklyIncomePieChartURL(incomeSummary)
		if err != nil {
			log.Info("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s\n(–î–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å)", report))
			_, _ = bot.Send(msg)
			handled = true
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å –ø–æ–¥–ø–∏—Å—å—é
		imageMsg := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(chartURL))
		imageMsg.Caption = report       // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞
		imageMsg.ParseMode = "Markdown" // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∏
		_, err = bot.Send(imageMsg)
		if err != nil {
			log.Info("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é: %v", log.With("error", err))
			return
		}

		handled = true

	case "üìà –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü":
		analyticHandler := methodsForIncomeAnalys.AnalyticHandler{DB: database.DB} // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü
		transactions, totalIncome, err := analyticHandler.IncomeMonthAnalytic(update)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			_, _ = bot.Send(msg)
			log.Info("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü", log.With("error", err))
			return
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
		report := methodsForIncomeAnalys.GenerateMonthlyIncomeReport(transactions, currency)

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–∏–∞–≥—Ä–∞–º–º—ã
		chartURL, err := methodsForIncomeAnalys.GenerateIncomePieChartURL(transactions, totalIncome)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			_, _ = bot.Send(msg)
			log.Info("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞", log.With("error", err))
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å –ø–æ–¥–ø–∏—Å—å—é
		imageMsg := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(chartURL))
		imageMsg.Caption = report       // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞
		imageMsg.ParseMode = "Markdown" // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∏
		_, err = bot.Send(imageMsg)
		if err != nil {
			log.Info("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é", log.With("error", err))
			return
		}

		handled = true

	// –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –û–¢–ß–ï–¢–´ (—Ä–∞—Å—Ö–æ–¥—ã)

	case "üí∏ –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º":
		incomes := buttonCreator.CreateExpensesAnalyticButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞")
		msg.ReplyMarkup = incomes
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send main menu", log.With("error", err))
		}
		handled = true

	case "üìâ –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
		dbConn := methodsForExpenses.ExpensesHandler{DB: database.DB}
		expenses, err := dbConn.ExpenseDayAnalytic(update)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			_, _ = bot.Send(msg)
			log.Info("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å", log.With("error", err))
			return
		}
		report := methodsForExpenses.GenerateDailyExpenseReport(expenses, currency)
		msg := tgbotapi.NewMessage(chatID, report)
		msg.ParseMode = "Markdown"
		_, _ = bot.Send(msg)
		handled = true

	case "üìâ –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é":
		dbConn := methodsForExpenses.ExpensesHandler{DB: database.DB}
		expenses, err := dbConn.ExpenseWeekAnalytic(update) // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			_, _ = bot.Send(msg)
			log.Info("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é", log.With("error", err))
			return
		}

		report := methodsForExpenses.GenerateWeeklyExpensesReport(expenses, currency) // –æ—Ç—á–µ—Ç

		// —Å—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
		chartURL, err := methodsForExpenses.GenerateWeeklyExpensePieChartURL(expenses)
		if err != nil {
			log.Info("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s\n(–î–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å)", report))
			_, _ = bot.Send(msg)
			handled = true
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å –ø–æ–¥–ø–∏—Å—å—é
		imageMsg := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(chartURL))
		imageMsg.Caption = report       // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞
		imageMsg.ParseMode = "Markdown" // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∏
		_, err = bot.Send(imageMsg)
		if err != nil {
			log.Info("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é", log.With("error", err))
			return
		}

		handled = true

	case "üìâ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü":
		dbConn := methodsForExpenses.ExpensesHandler{DB: database.DB}
		expenses, err := dbConn.ExpenseMonthAnalytic(update)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			_, _ = bot.Send(msg)
			log.Info("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ –º–µ—Å—è—Ü", log.With("error", err))
			return
		}
		report := methodsForExpenses.GenerateMonthlyExpensesReport(expenses, currency)

		// —Å—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
		chartURL, err := methodsForExpenses.GenerateExpensePieChartURL(expenses)
		if err != nil {
			log.Info("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s\n(–î–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å)", report))
			_, _ = bot.Send(msg)
			handled = true
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å –ø–æ–¥–ø–∏—Å—å—é
		imageMsg := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(chartURL))
		imageMsg.Caption = report       // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞
		imageMsg.ParseMode = "Markdown" // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∏
		_, err = bot.Send(imageMsg)
		if err != nil {
			log.Info("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é", log.With("error", err))
			return
		}

		handled = true

	// –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –£–ü–†–ê–í–õ–ï–ù–ò–ï

	case "üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
		command := "üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
		PushOnAnalyticButton(bot, update, buttonCreator, command, log)
		handled = true

	case "üóì –ü–æ–¥–ø–∏—Å–∫–∏":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üë∑‚Äçüîß`–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ...`\n")
		msg.ParseMode = "Markdown"
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /info message: ", log.With("error", err))
		}
		handled = true

	// –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω—É—Ç—Ä–∏ –û—Ç—á–µ—Ç–æ–≤
	case "üßë‚Äçüíª –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
		analyse := buttonCreator.CreateSuperAnalyticButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
		msg.ReplyMarkup = analyse
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send main menu: %v", log.With("error", err))
		}
		handled = true

	case "üí≤–ê–Ω–∞–ª–∏–∑ –∑–∞ –Ω–µ–¥–µ–ª—é":
		command := "üí≤–ê–Ω–∞–ª–∏–∑ –∑–∞ –Ω–µ–¥–µ–ª—é"
		PushOnAnalyticButton(bot, update, buttonCreator, command, log)
		handled = true

	case "üí∞–ê–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü":
		command := "üí∞–ê–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü"
		PushOnAnalyticButton(bot, update, buttonCreator, command, log)
		handled = true

	case "üßÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		dbConn := database.DB
		userID := update.Message.From.ID
		report := methodsForSummary.GenerateStatisticsReport(userID, dbConn)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, report)
		msg.ParseMode = "Markdown"
		if _, err := bot.Send(msg); err != nil {
			log.Info("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}

		handled = true

	case "‚öñÔ∏è C–∞–ª—å–¥–æ":
		command := "‚öñÔ∏è C–∞–ª—å–¥–æ"
		PushOnAnalyticButton(bot, update, buttonCreator, command, log)
		handled = true

	case "üí≤–°–∞–ª—å–¥–æ –∑–∞ –Ω–µ–¥–µ–ª—é":
		command := "üí≤–°–∞–ª—å–¥–æ –∑–∞ –Ω–µ–¥–µ–ª—é"
		PushOnAnalyticButton(bot, update, buttonCreator, command, log)
		handled = true

	case "üí∞–°–∞–ª—å–¥–æ –∑–∞ –º–µ—Å—è—Ü":
		command := "üí∞–°–∞–ª—å–¥–æ –∑–∞ –º–µ—Å—è—Ü"
		PushOnAnalyticButton(bot, update, buttonCreator, command, log)
		handled = true

	case "üë®‚Äçüî¨ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üë∑‚Äçüîß`–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ...`\n")
		msg.ParseMode = "Markdown"
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send main menu: %v", log.With("error", err))
		}
		handled = true

	// –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω—É—Ç—Ä–∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

	case "üîÅ –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç—ë–∂":
		command := "üîÅ –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç—ë–∂"
		PushOnAnalyticButton(bot, update, buttonCreator, command, log)
		handled = true

	case "üéØ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üë∑‚Äçüîß`–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ...`\n")
		msg.ParseMode = "Markdown"
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /info message:", log.With("error", err))
		}
		handled = true

	// –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–¥–µ–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –ø—Ä—è–º –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç) –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Ö–æ—Ç—å —á–µ—Ä–µ–∑ 3 –¥–Ω—è —Ö–æ—Ç—å —á–µ—Ä–µ–∑ 333 –¥–Ω—è
	case "üîÇ –†–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üë∑‚Äçüîß`–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ...`\n")
		msg.ParseMode = "Markdown"
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send /info message: %v", log.With("error", err))
		}
		handled = true
	}

	// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
	if !handled {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send unknown command message: %v", log.With("error", err))
		}
	}
}
