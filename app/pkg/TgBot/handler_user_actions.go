package TgBot

import (
	"cachManagerApp/app/db/models"
	"cachManagerApp/app/internal/methodsForUser"
	"cachManagerApp/app/pkg/ButtonsCreate"
	"cachManagerApp/database"
	"fmt"
	"log/slog"
	"strings"
	"unicode"
	"unicode/utf8"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ –≤–∞–ª—é—Ç—ã
func handleUserAction(bot *tgbotapi.BotAPI, update tgbotapi.Update, userResp UserResponse, buttonCreator ButtonsCreate.TelegramButtonCreator, log *slog.Logger) {
	chatID := update.Message.Chat.ID

	switch userResp.Action {

	case "change_name":
		newName := strings.TrimSpace(update.Message.Text) // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
		if newName == "" {
			newName = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
		}

		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–ª–∏–Ω–∞ –æ—Ç 1 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
		var validName bool = true
		for _, symbol := range newName {
			if !unicode.IsLetter(symbol) && symbol != ' ' { // –∏–º—è —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
				validName = false
				break
			}
		}

		if utf8.RuneCountInString(newName) == 0 || utf8.RuneCountInString(newName) > 32 || !validName {
			msg := tgbotapi.NewMessage(chatID, "üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤.")
			bot.Send(msg)
			return
		}

		// –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user := methodsForUser.UserMethod{}
		if err := user.UpdateUserName(update); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")
			bot.Send(msg)
			return
		}

		msgDone := fmt.Sprintf("‚úÖ –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *%s*.", newName)
		returnToMainMenu(bot, chatID, buttonCreator, msgDone)

	case "change_currency":
		newCurrency := strings.ToLower(update.Message.Text) // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ –∞–ª—Ñ–∞–≤–∏—Ç
		var okCurrency bool = true
		for _, symbol := range newCurrency {
			if !unicode.IsLetter(symbol) {
				okCurrency = false
				break
			}
		}
		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã –Ω–∞ –¥–ª–∏–Ω—É
		if utf8.RuneCountInString(newCurrency) != 3 || okCurrency != true {
			msg := tgbotapi.NewMessage(chatID, "üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã. –í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.")
			bot.Send(msg)
			return
		}
		// –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user := methodsForUser.UserMethod{}
		if err := user.UpdateUserCurrency(update); err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã", log.With("error", err))
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã")
			bot.Send(msg)
			return
		}

		msgDone := fmt.Sprintf("‚úÖ –í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *%s*.", newCurrency)
		returnToMainMenu(bot, chatID, buttonCreator, msgDone)
	}

	mu.Lock()
	delete(userStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	mu.Unlock()
}

// –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func returnToMainMenu(bot *tgbotapi.BotAPI, chatID int64, buttonCreator ButtonsCreate.TelegramButtonCreator, msg string) {
	// —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	mainMenu := buttonCreator.CreateMainMenuButtons()

	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	menuMsg := tgbotapi.NewMessage(chatID, msg)
	menuMsg.ParseMode = "Markdown"
	menuMsg.ReplyMarkup = mainMenu // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
	bot.Send(menuMsg)

	delete(transactionStates, chatID)
}

// –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ –ë–î
func ClearUserNameFromChatID(chatID int64) (string, error) {
	var user models.Users
	result := database.DB.Where("telegram_id = ?", chatID).First(&user)
	if result.Error != nil {
		return "", result.Error
	}
	fmt.Println(user.Name)
	return user.Name, nil
}

// –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏–∑ –±–¥
func CurrencyFromChatID(chatID int64) (string, error) {
	var user models.Users
	result := database.DB.Where("telegram_id = ?", chatID).First(&user)
	if result.Error != nil {
		return "", result.Error
	}
	return user.Currency, nil
}
