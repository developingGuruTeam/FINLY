package tg_bot

import (
	methods_for_summary "cachManagerApp/app/internal/methods-for-analytic/methods-for-summary"
	"cachManagerApp/app/internal/notion"
	buttons_create "cachManagerApp/app/pkg/buttons-create"
	"log/slog"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func PushOnAnalyticButton(bot *tgbotapi.BotAPI, update tgbotapi.Update, buttonCreator buttons_create.TelegramButtonCreator, command string, log *slog.Logger) {
	currency, _ := CurrencyFromChatID(update.Message.Chat.ID)

	switch command {

	case "‚öñÔ∏è C–∞–ª—å–¥–æ":
		saldo := buttonCreator.CreateSaldoAnalyticButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥")
		msg.ReplyMarkup = saldo
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send main menu: %v", slog.Any("error", err))
		}

	case "üí≤–°–∞–ª—å–¥–æ –∑–∞ –Ω–µ–¥–µ–ª—é":
		summary, err := methods_for_summary.AnalyseBySaldoWeek(update)
		if err != nil {
			log.Info("Failed to get summary in the week period: %v", slog.Any("error", err))
		}
		response := methods_for_summary.GenerateWeeklySaldoReport(summary, currency)
		newMsg := tgbotapi.NewMessage(update.Message.Chat.ID, response)
		newMsg.ParseMode = "Markdown"
		_, _ = bot.Send(newMsg)

	case "üí∞–°–∞–ª—å–¥–æ –∑–∞ –º–µ—Å—è—Ü":
		summary, err := methods_for_summary.AnalyseBySaldoMonth(update)
		if err != nil {
			log.Info("Failed to get summary in the month period: %v", slog.Any("error", err))
		}
		response := methods_for_summary.GenerateMonthlySaldoReport(summary, currency)
		newMsg := tgbotapi.NewMessage(update.Message.Chat.ID, response)
		newMsg.ParseMode = "Markdown"
		_, _ = bot.Send(newMsg)

	// –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
	case "üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
		notion := buttonCreator.CreateNotionButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
		msg.ReplyMarkup = notion
		if _, err := bot.Send(msg); err != nil {
			log.Info("Failed to send main menu: %v", slog.Any("error", err))
		}

	case "üîÅ –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç—ë–∂":
		// —Å–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
		notion.StartReminder(bot, update)
		reminder := buttonCreator.CreateFreqButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞:")
		msg.ReplyMarkup = reminder
		_, err := bot.Send(msg)
		if err != nil {
			log.Error("Error sending message:", slog.Any("error", err))
		}
	}
}
