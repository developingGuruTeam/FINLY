package tg_bot

import (
	methods_for_user "cachManagerApp/app/internal/methods-for-user"
	"cachManagerApp/app/internal/notion"
	buttons_create "cachManagerApp/app/pkg/buttons-create"
	"log/slog"
	"os"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func ConnectToTgBot(log *slog.Logger) (*tgbotapi.BotAPI, error) {

	bot, err := tgbotapi.NewBotAPI(os.Getenv("BOT_TOKEN"))
	if err != nil {
		log.Error("Failed to connect to Telegram bot API:", slog.Any("error", err))
	}
	log.Info("Successfully connected to Telegram bot API!")

	bot.Debug = false

	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 15

	updates := bot.GetUpdatesChan(updateConfig)

	// —Å—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	notion.StartReminderServiceWithCron(bot, log)

	// —Å—Ç–∞—Ä—Ç –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
	buttonCreator := buttons_create.TelegramButtonCreator{}

	for update := range updates {
		if update.Message != nil {
			switch update.Message.Text {
			// –±–∞–∑–æ–≤—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç!!!
			case "/start":

				userHandler := &methods_for_user.UserMethod{}
				if err := userHandler.PostUser(update, log); err != nil {
					log.Info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", slog.Any("error", err))
				} else {
					log.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", slog.Any("user added", userHandler))
				}

				// –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞
				ScheduleNotifications(bot, update.Message.Chat.ID, update.Message.From.UserName, log)

				// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				WelcomeMessage(bot, update.Message.Chat.ID, buttonCreator, log)

			// —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–æ–≤
			case "/send_admin_message":
				if isAdmin(update.Message.Chat.ID) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
					message := "üéâ _–°–æ –°—Ç–∞—Ä—ã–º –ù–æ–≤—ã–º –≥–æ–¥–æ–º!\n–ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é, —Å—á–∞—Å—Ç—å–µ–º –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —É—Å–ø–µ—Ö–∞–º–∏!_ üêô"
					SendOneTimeNotificationToAll(bot, message, log)
				} else {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
					bot.Send(msg)
				}

			default:
				// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
				chatID := update.Message.Chat.ID
				if _, ok := notion.RemindersStates[chatID]; ok {
					// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
					notion.HandleReminderInput(bot, update, log)
				} else {
					PushOnButton(bot, update, buttonCreator, log)
				}
			}
		}
	}
	return bot, nil
}
