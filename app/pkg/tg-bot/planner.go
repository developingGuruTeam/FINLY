package tg_bot

import (
	"cachManagerApp/app/db/models"
	"cachManagerApp/database"
	"fmt"
	"log/slog"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/go-co-op/gocron" // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
var activeSchedulers = make(map[int64]*gocron.Scheduler)

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func SendNotificationToUser(bot *tgbotapi.BotAPI, chatID int64, userName string, log *slog.Logger) {
	clearName, _ := ClearUserNameFromChatID(chatID)
	if clearName == "" {
		clearName = userName
	}
	message := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s üëã!\n–ù–µ –∑–∞–±—ã–≤–∞–π –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã, —á—Ç–æ–±—ã –≤–µ—Å—Ç–∏ –∏—Ö —É—á–µ—Ç üßÆ", clearName)

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	msg := tgbotapi.NewMessage(chatID, message)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if _, err := bot.Send(msg); err != nil {
		log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", slog.Any("error", err))
	}
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 –ø–æ —Å—Ä–µ–¥–Ω–µ–µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
func ScheduleNotifications(bot *tgbotapi.BotAPI, chatID int64, userName string, log *slog.Logger) {
	// –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if _, exists := activeSchedulers[chatID]; exists {
		log.Info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", slog.Int64("chatID", chatID))
		return
	}
	scheduler := gocron.NewScheduler(time.Local)

	//scheduler.Cron("*/1 * * * *").Do(func() { // –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ö—Ä–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ù–ï –£–î–ê–õ–Ø–¢–¨!
	scheduler.Cron("0 12 * * *").Do(func() { // –ë–û–ï–í–ê–Ø –ß–ê–°–¢–¨! —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12 (–ø–æ —Ñ–∞–∫—Ç—É 15 —á–∞—Å–∞ –¥–ª—è –º—Å–∫)
		SendNotificationToUser(bot, chatID, userName, log) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	})

	// –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞!
	scheduler.StartAsync()
	activeSchedulers[chatID] = scheduler
}

// —Ä–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
func SendOneTimeNotificationToAll(bot *tgbotapi.BotAPI, message string, log *slog.Logger) {
	// –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
	var users []models.Users
	result := database.DB.Find(&users)
	if result.Error != nil {
		log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", slog.Any("error", result.Error))
		return
	}

	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ü–∏–∫–ª–µ
	for _, user := range users {
		chatID := int64(user.TelegramID) // –ø—Ä–∏–≤–æ–¥–∏–º TelegramID –∫ int64
		msg := tgbotapi.NewMessage(chatID, message)
		msg.ParseMode = "Markdown"
		_, err := bot.Send(msg)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", slog.Int64("chatID", chatID))
		} else {
			log.Info("–†–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", slog.Int64("chatID", chatID))
		}
	}
}

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É
func isAdmin(chatID int64) bool {
	admins := os.Getenv("ADMIN_CHAT_IDS")  // —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env
	adminIDs := strings.Split(admins, ",") // —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ ID

	for _, id := range adminIDs {
		userID, err := strconv.ParseInt(strings.TrimSpace(id), 10, 64) // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ int64
		// –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —é–∑–µ—Ä —Å –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–æ–≤
		if err == nil && userID == chatID {
			return true
		}
	}
	return false
}
