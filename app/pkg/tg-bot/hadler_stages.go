package tg_bot

import (
	"cachManagerApp/app/internal/methodsForTransaction"
	"cachManagerApp/app/pkg/ButtonsCreate"
	"log/slog"
	"strconv"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type CommentResponse struct {
	Category string `json:"category"`
	Amount   int64  `json:"amount"`
}

type TransactionResponse struct {
	Action string `json:"action"`
}

type UserResponse struct {
	Action string `json:"action"`
}

var (
	mu                sync.Mutex                            // –º—å—é—Ç–µ–∫—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–ø–µ
	commentStates     = make(map[int64]CommentResponse)     // –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
	userStates        = make(map[int64]UserResponse)        // –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	transactionStates = make(map[int64]TransactionResponse) // –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
)

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—é–¥–∞)
func PushOnButton(bot *tgbotapi.BotAPI, update tgbotapi.Update, buttonCreator buttons_create.TelegramButtonCreator, log *slog.Logger) {
	if update.Message != nil {
		chatID := update.Message.Chat.ID

		// –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–∏–º –º–∞–ø–∞–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		mu.Lock()
		val, ok := userStates[chatID]          // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏/–≤–∞–ª—é—Ç—ã
		val2, ok2 := transactionStates[chatID] // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		val3, ok3 := commentStates[chatID]     // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
		mu.Unlock()

		// –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
		if ok3 {
			if update.Message.Text == "‚§µÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
				// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞
				transaction := methods_for_transactions.TransactionsMethod{}
				if err := transaction.PostTransactionWithComment(update, val3.Category, val3.Amount, "", log); err != nil {
					log.Info("Failed to save transaction without comment: %s", slog.Any("error", err))
					msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
					bot.Send(msg)
					return
				}

				doneMsg := "‚úÖ –°—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
				returnToMainMenu(bot, chatID, buttonCreator, doneMsg) // —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
				mu.Lock()
				delete(commentStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
				mu.Unlock()
				return
			}

			// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∫–æ–º–º–µ–Ω—Ç–∞
			comment := update.Message.Text
			transaction := methods_for_transactions.TransactionsMethod{}
			if err := transaction.PostTransactionWithComment(update, val3.Category, val3.Amount, comment, log); err != nil {
				log.Info("Failed to save transaction with comment: %s", slog.Any("error", err))
				msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
				bot.Send(msg)
				return
			}

			doneMsg := "‚úÖ –°—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω"
			returnToMainMenu(bot, chatID, buttonCreator, doneMsg)
			mu.Lock()
			delete(commentStates, chatID)
			mu.Unlock()
			return
		}

		// –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω
		if ok2 && val2.Action != "" {
			// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
			sum, err := strconv.Atoi(update.Message.Text)
			if err != nil || sum <= 0 {
				msg := tgbotapi.NewMessage(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
				bot.Send(msg)
				return
			}

			// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
			mu.Lock()
			commentStates[chatID] = CommentResponse{
				Category: val2.Action,
				Amount:   int64(sum),
			}
			delete(transactionStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç
			mu.Unlock()

			msg := tgbotapi.NewMessage(chatID, "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—É–º–º–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚§µÔ∏è*–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å*")
			msg.ParseMode = "Markdown"
			msg.ReplyMarkup = buttonCreator.CreateCommentButtons() // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
			bot.Send(msg)
			return
		}

		// –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –∏–ª–∏ –≤–∞–ª—é—Ç—ã
		if ok && val.Action != "" {
			handleUserAction(bot, update, val, buttonCreator, log) // –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
			return
		}

		// –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
		handleButtonPress(bot, update, buttonCreator, log)
	}
}
